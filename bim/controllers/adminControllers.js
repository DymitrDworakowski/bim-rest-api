const Admin = require("../models/admin");
const jwt = require("jsonwebtoken");

// üÜï –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω–∞
async function register(req, res, next) {
  const { name, email, password } = req.body;

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –∞–¥–º—ñ–Ω –∑ —Ç–∞–∫–∏–º email
    const existingAdmin = await Admin.findOne({ email });
    if (existingAdmin) {
      return res.status(400).json({ message: "Email already in use" });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞
    const newAdmin = new Admin({ name, email, password });
    await newAdmin.save();

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { id: newAdmin._id, email: newAdmin.email, role: "admin" },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    newAdmin.token = token;
    await newAdmin.save();

    res.status(201).json({ token });
  } catch (err) {
    next(err);
  }
}

// üîë –õ–æ–≥—ñ–Ω –∞–¥–º—ñ–Ω–∞
async function login(req, res, next) {
  const { email, password } = req.body;

  try {
    const admin = await Admin.findOne({ email });
    if (!admin) return res.status(401).json({ message: "Invalid credentials" });

    const isMatch = await admin.checkPassword(password);
    if (!isMatch)
      return res.status(401).json({ message: "Invalid credentials" });

    const token = jwt.sign(
      { id: admin._id, email: admin.email, role: "admin" },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    admin.token = token;
    admin.lastLogin = new Date();
    await admin.save();

    res.json({ token });
  } catch (err) {
    next(err);
  }
}

// üö™ –õ–æ–≥–∞—É—Ç
async function logout(req, res, next) {
  try {
    const admin = await Admin.findById(req.user.id);
    if (!admin) return res.status(404).json({ message: "Admin not found" });

    admin.token = null;
    await admin.save();

    res.json({ message: "Logged out" });
  } catch (err) {
    next(err);
  }
}

// üë§ –ü—Ä–æ—Ñ—ñ–ª—å –∞–¥–º—ñ–Ω–∞
async function profile(req, res, next) {
  try {
    const admin = await Admin.findById(req.user.id).select("-password -token");
    if (!admin) return res.status(404).json({ message: "Admin not found" });

    res.json(admin);
  } catch (err) {
    next(err);
  }
}

// üîπ –ï–∫—Å–ø–æ—Ä—Ç —É—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ module.exports
module.exports = { login, logout, profile, register };
